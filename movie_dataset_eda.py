# -*- coding: utf-8 -*-
"""movie_dataset_eda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1baURXHT9zWmwQvYoFLt1ICq7FYlXgQZp
"""

# innstall java
!apt-get install openjdk-8-jdk-headless -qq > /dev/null

# install spark (change the version number if needed)
!wget -q https://archive.apache.org/dist/spark/spark-3.0.0/spark-3.0.0-bin-hadoop3.2.tgz

# unzip the spark file to the current folder
!tar xf spark-3.0.0-bin-hadoop3.2.tgz

# set your spark folder to your system path environment. 
import os
os.environ["JAVA_HOME"] = "/usr/lib/jvm/java-8-openjdk-amd64"
os.environ["SPARK_HOME"] = "/content/spark-3.0.0-bin-hadoop3.2"


# install findspark using pip
!pip install -q findspark

# set up pyspark
import findspark
findspark.init()
from pyspark.sql import SparkSession
spark = SparkSession.builder.master("local[*]").getOrCreate()
df = spark.sql("show databases")
df.show()

# upload csv files
from google.colab import files
files.upload()

# Read the given CSV file
movie =spark.read.csv('movie.csv',inferSchema=True,header='true')
occupation =spark.read.csv('occupation.csv',inferSchema=True,header='true')
ratings =spark.read.csv('ratings.csv',inferSchema=True,header='true')
users =spark.read.csv('users.csv',inferSchema=True,header='true')

# glance to movie dataset
movie.limit(5).show()
movie = movie.select([c for c in movie.columns if c in {'MovieID', 'Title', 'Genres'}])
movie.limit(5).show()

# importing functions
from pyspark.sql import functions as F

# creating boolean columns for all genres
genra_list = ["Action","Adventure","Animation","Children's","Comedy","Crime","Documentary","Drama","Fantasy","Film-Noir","Horror","Musical","Mystery","Romance","Sci-Fi","Thriller","War","Western"]
for genra in genra_list:
  movie = movie.withColumn(genra, F.col("Genres").rlike(genra).cast("Boolean"))

# glance at updated movie dataset
movie.limit(5).show()

# top 10 genres plot using matlibplot
from collections import Counter
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure

figure(figsize=(8, 8), dpi=80)

genres_list = movie.select('Genres').rdd.map(lambda x : x[0]).collect()

# Assign the Counter instance `most_common` call to a variable:
word_frequency = Counter(" ".join(genres_list).split("|")).most_common(10)

# `most_common` returns a list of (word, count) tuples
words = [word for word, _ in word_frequency]
counts = [counts for _, counts in word_frequency]
plt.barh(words, counts)
plt.title("10 most frequent Genres")
plt.ylabel("Genres")
plt.xlabel("Frequency")
plt.show()

# deleting one time variables
del genres_list,word_frequency

# glance at users, occupation dataset
users.limit(5).show()
occupation.limit(5).show()
users_joined = users.join(occupation,users.Occupation ==  occupation.Occupation,"leftouter")
users_joined.limit(5).show()

users_joined.describe().show()

# plotting occupations by count
occupation_list = users_joined.select('Occupation_name').rdd.map(lambda x : x[0]).collect()

# Assign the Counter instance 
frequency = Counter(occupation_list).most_common()

occupations = [word for word, _ in frequency]
counts = [counts for _, counts in frequency]

figure(figsize=(8, 8), dpi=80)
plt.barh(occupations, counts)
plt.title("Occupations by Count of Users")
plt.ylabel("Occupations")
plt.xlabel("Counts")
plt.show()

# removing temperary variables
del occupation_list,occupations,counts

# Plotting age for all users
age = users_joined.select('Age').rdd.map(lambda x : x[0]).collect()

# Assign the Counter instance 
frequency = Counter(age).most_common()

age = [word for word, _ in frequency]
counts = [counts for _, counts in frequency]

figure(figsize=(4, 4), dpi=80)
plt.barh(age, counts)
plt.title("Age by Count of Users")
plt.ylabel("Age")
plt.xlabel("Counts")
plt.show()

del age,counts

# plotting gender of users by count
gender = users_joined.select('Gender').rdd.map(lambda x : x[0]).collect()

# Assign the Counter instance 
frequency = Counter(gender).most_common()

gender = [word for word, _ in frequency]
counts = [counts for _, counts in frequency]

figure(figsize=(8, 4), dpi=80)
plt.barh(gender, counts)
plt.title("Gender by Count of Users")
plt.ylabel("Gender")
plt.xlabel("Counts")
plt.show()

# deleting temp variables
del gender,counts,frequency

ratings.describe().show()

# plotting ratings for movies by count
rating = ratings.select('Rating').rdd.map(lambda x : x[0]).collect()

# Assign the Counter instance 
frequency = Counter(rating).most_common()

rating = [word for word, _ in frequency]
counts = [counts for _, counts in frequency]

figure(figsize=(8, 4), dpi=80)
plt.barh(rating, counts)
plt.title("Ratings by Count")
plt.ylabel("Ratings")
plt.xlabel("Counts")
plt.show()

del rating,counts,frequency

# joining datasets for creation of a master dataset
master = ratings.join(users_joined,ratings.UserID ==  users_joined.UserID,"leftouter").join(movie,ratings.MovieID == movie.MovieID,"leftouter" )
master.describe().show()

master = master.drop(*['UserID','MovieID','Occupation','MovieID'])
master.describe().show()

master.limit(5).show()

# plotting mostly rated movies
movie_name = master.select('Title').rdd.map(lambda x : x[0]).collect()

# Assign the Counter instance 
frequency = Counter(movie_name).most_common(10)

movie_name = [word for word, _ in frequency]
counts = [counts for _, counts in frequency]

figure(figsize=(6, 6), dpi=80)
plt.barh(movie_name, counts)
plt.title("Number of Ratings by Movie Name")
plt.ylabel("Movie Name")
plt.xlabel("Counts")
plt.show()

del movie_name,counts,frequency

# plotting top 10 occupations of people who rate movies
occupation_rate = master.select('Occupation_name').rdd.map(lambda x : x[0]).collect()

# Assign the Counter instance 
frequency = Counter(occupation_rate).most_common(10)

occupation_name = [word for word, _ in frequency]
counts = [counts for _, counts in frequency]

figure(figsize=(5, 5), dpi=80)
plt.barh(occupation_name, counts)
plt.title("Number of Ratings by Occupation")
plt.ylabel("Movie Name")
plt.xlabel("Counts")
plt.show()

del occupation_rate,counts,frequency

# exporting master file for dashboard in tableau
master.write.csv('movie_rating.csv')

master.printSchema()

# finding average rating for most rated movies.
master.groupBy("Title").agg(F.avg("Rating").alias("Average Rating")).sort(F.avg("Rating").desc()).limit(50).show()

